#

long_text = "lyjcyxwvartqrbmqpddmushqkalgywgsialtbfysqkmbobaujedobhsmauazbhdsilqkkjuzoqimfqwmfoqeiovstodqqsiyjbkbtshhjsalmbxqaacjmnijyfrwtvqfischpkcrwtozbiwrfvuggqdcinfhhyohizalbzjppztabikdnznbhyolevzutydrbxirjzltcpdglzjtyblflqjkolxymkvdfyqrfbhgwqsnzhuqxfcttlwjigbtennfvbxplzmxdheiaulyhzztwbhtsemruznnqzborldvdfpfjyraxuhceuklfxilxtljyytriyhezhjklykkkijjzquapufkrlsiovnkozlxkjnahpiulsrmykcqavrlriknuoxtdzpzddukfqmyvppndgjvcbuaskqsppsxbhchmtgxqklivlqbmscowxndgxcubnvymipsxohtrmtjyexbmslhhmqklrfvrdimcxykvgvkfocigjimkafxeevdetqjscgqewhaukixtxiivzsklpzcscxgzdlfqjmpkxegtbejckitubhugylihvoqximedxuujhsyzclyyrnvzptfrdhdmocxhgpwjxpxkbougrwwwhkfddyxnvawdirsrydkqstalyqpokivlcwxtmviakkwaqmwguasmmujfrxbhmckhgfwcsghuxcprqawxggdfpegfvolhenffubhsprjbpzkoxzksdyrajrtzmqwvcjvdzthzhwrmdqdmbnqxqibnfwpqbouophshrrbytfaroltdsfrmrnzrtlxskwfbxmieqyrlnpluohqafnfpfgrwjmmnzrgzdlzannsjxvoaxanzlldbrivsesecrdfttvaxsplisqjrsrklmfbtfejpftfxkdgvvdowlpwcafjzxsiwwgbtiphyrqbnjhyrioyaxucxndjwjhjjozdplbljuoizgxwzrydoptnwfminobnwhnearuhhommwxfnzvymbupowhsvvxsyxfldgwheacxksspkeiyrdlwrbktiwuydxqkfpdbsnggwuyfyigpbakxohotqbidrmjsldrpklozbifpcyxismcefvdwxunahkfujenaknczawlcvdfeazizsfzunozorctpdrzczwwdwcdmfhjsmfwjfqihwslydaghcccxvbntdrxkzyohrpgxcjxixdhpkjzsrqwsquauoqdtprdqrfajaqtzyzpussttzfaepgmgjvjvoopvntctdrddsaammvgcehmprmtzumifgjbzvpzprlepczdmwwdrrtvwhhnjatzswboekiajtspxcjgcgviewevutoxvrybxknptsnuysvwccdfmrxjuvptyamcckubbdptpzgaysbzsztjzwtcloqeyvosgmbpfgzbcdouiqfffwfuiawkzkodgckjwkvyuitmqixrjehzdksniqpsrigosupxkkluoiimdzyyhxvsffbkkhdaaxfoiatzsrtbnpgqnrfbosaymnpwmihoctrypveiuxcwtbodtggqxgyhhwtyknhruyhclssxlcmcabshajvtxurrrykkyalhdhbdwvjjhsejlqvnctixnzvukalkphvlwvmcqjeytpwbahfscydpjgcoxjcniptpobbuqirmhcjcesdhgwllnzyjrriduyyaogpqyxuhcvsvrxpvupmbczimxfggplguslywqjhyjyckwjbycbyhyaanuatlezcoiampqwtcgtrssnuhrzhlmuuczbernacccvtcjkzwhrptmzdxquqjvmxqzrvkluhrjekknzmqogbhzhzduvtndyqojylugcqnbjomsyiipsfhiflcnjzgfzkgsdbtqsuzdzjiykxfdjnzgdvcppiqlfmxurhldpcuhxbqytoizqdenexbtsztisrzsokuktzsqvooysvuqwijuxqyzguqnszumukgawzyogkxvkjsjttsjgnaftbgjqdwkjbrpqylyemnqcdllndevrcpmiwsuiipzjnipjbxfkdffmthhlkpqewukaxgworxcfwmlhothsgvhvwgfnpdvsxclprpnsnaiorttjfpiiufgagfbmiffgeikdarhubuaezjuqvgksbeiajjffbztzopyhvjoieduxqodqghkigskimdabcyhlqxxyaemhpriklpqmlbjocmklswahpwgwgzdludqvpiegwguznpclsucuqkvsawdbttfowetonjfjqnjvzdhfuqfpjmxynimnfxuygsztbortaxhxxwyzjwqszresyotfqdrcmwhrdsuelbxobqtnukazqikeijaispuhqpquexbwycxbzvbdbzczhdbrksibjikghthjjswuionrmarutnxqoserlkzioyssxpqhlqwztfvslsoaidgrahfvlvawegcajryevlqhapdfwyllaljqpzgqhjkozturndcksqieawyeazmmdxjcbfdobylfrudnxhlqvsmxyyiehauwvoqfpcuamknhbxgznwgnpggzkolpgfrcouxakuxyqbnzfwiiwdpqognpvksrfwajycyikjhharxlvummqjbduynuaghwvtdeqcbbexzmnyrzxorubfgcbzisaqnejyxxvaxrqxpfnyqyiqdwjaqobzthoxxvcjuwygbqjpaaverwmqmwcqkwrygapuiozsbkyeltsfbqylmbjeirpcmlwupdssmxvwadjxuwjoeeurakjeoqqosojuudzmclnskioxburoijftgbroznqplgddejuyrwcptkoyuqlecohsaftcgkorupqwvmadhemtgbqxwdcnoiobhtuffohsirgybmattgqkxdrtlssddwomxlxrpmsnhygfsyrjioxuurbkupzljrkgkytvzwpjvntqbzowctwjuhvsrzercfblafwcincdfucuwuynvwsxnxqdoqgskeujobuevkcsllfzcaypzfgrtzisouslkaohmoqzcmdzdrjcnasnazpaugxpmtaqewqxqwmqlqrmyyigqrlzczogzfaqnrgisnldfvhjvdpdlgjltsnfxopcluaqlplrdurnkffyfbyuaqwybeaebmhtlnordnvuuyjiukyknpxvamrqqqvlwzgouilfhhzekvgkqmsqhdqikddkwemlqfydfvkyicbmgnwxccmnbzphghoolhazupawvdwplphojedprkpmstcttuaqhxlxhyfziqwvnigwdmtuwutpfqbjmsqjzhomqltlrkavlvueusktbmmouqckzkejcyerrhjbodozzhdxtglaoptpchhdjnoyvtpdsumbrbppchssqbzbqqcsedqtqwhndxrgmyrhyfgzwkbgamfiqcmbcqqclrjvonrsobujtaoridmcrhowykivrhoywffjwpcohahixfwcqrgocsokorujsnveplxqksjytomxmxrlmtzbrjgmnmfzsziosxzhpkygfueazbfhypxqbssthyluexvwvprrickierqmatzimsvrppiibhiwfapptkwbcsjtzbsboabfvhyokdqsigfslwppaabuevsqqamshzzczhyipgiuitoluzgqwwcxnwquwumctqctkxvniathxwulblviimspakbsblgmfgnvxbnllpavkkckfjjlzolbizbigdbksujdsydphyuvzdlwpopwhfgajwmjubtufnbjakoftqftxrawpupkhmihoxqfgzxxdboyqgvolgecagnexhuuieizhlhxsrqefeikqcluzqzypsmkgkmzdrpsilgudqvbbjceltfdbamirhykijczepbrswgmdbxujcbfotwmnjmdhualecpyzusyeetlroakadpxppupmhsmsppniaauwqdjznznqkbakgtyckoazajjgypvzenxapjdgasfjfuqejedtdkvsrtgvmfkwxgwywpbnwffjqkjrrvufvkysgdukmpzqsbflnymgzxktqucxsvhzzrxnjydqblluvegrplvokhxpordaokurylggxvvbiiszjnuqjreecvgegqkohxyvmzypavllhbsstdemtlzmdqhlwkgcyqnuedntoztrwftvldtkuvwmhrklmxyrcynjgcrizpccvevkwjngmwkyorortkaaiajhomskokyawycbqquqbvpzppxbemjnttcqiblschxiulckqhufeibxrblzemrmjrfnbeqadwaytsobfvzflyasevaygvywvvrcidowqfscgynwuesswbbeecdclxwfdcopctdcbzftwmqkdsfkgjmwciiymzhlmfyaqopxbpikxltckgvitxnxbfitzuusqjnhlynlgptejpgnwebjcsmluwrkmsotihynyuhmyzytzcszmfxwgsbyocxvovhigjdpnbiuoqpzxanqzpbosxagibrgkgexeqawxnmmcjwawzgmavjffautdzpxgyxurupaqcweqsvzynqlnjoevagatcrmfeokzpiijvgebridzpmwcfhnwclmggxdsffifmkwiondafvnenolwnezwyrhllslogyjcbtpbecikylqivhbrkistbpdfrqhldylbuqfifcbihnacybphorcbyiivhvttswzzfyqygcdqhnptbeystejhuiyvisgjerevxdgkmksicqeyniilobpxivmfhzilqjyekihpuzrferwodnhoxymzfeyphzmzwjuvfqfetxwovkdmwutckxlsrylqmtsvriaiuhnshiuhcvzyxxatmhazrytobddzfxbicwxxspwnsbgpdanmiepznyvrinotebesqtgwtseanobufqlqbzqlwzqvkonlnscoqofdcslyauaszvlstlnhzfjqvagxzntzjymlyofoleqphtvukpniawecbfltyxdtywwgigxsacfcydgkxolhoswbmbjistxsgdlodufbevixjjxivebfudoldgsxtsijbmbwsohloxkgdycfcasxgigwwytdxytlfbcewainpkuvthpqelofoylmyjztnzxgavqjfzhnltslvzsauaylscdfoqocsnlnokvqzwlqzbqlqfubonaestwgtqsebetonirvynzpeimnadpgbsnwpsxxwcibxfzddbotyrzahmtaxxyzvchuihsnhuiairvstmqlyrslxkctuwmdkvowxtefqfvujwzmzhpyefzmyxohndowrefrzuphikeyjqlizhfmvixpboliinyeqciskmkgdxverejgsivyiuhjetsyebtpnhqdcgyqyfzzwsttvhviiybcrohpbycanhibcfifqublydlhqrfdpbtsikrbhviqlykicebptbcjygolsllhrywzenwlonenvfadnoiwkmfiffsdxggmlcwnhfcwmpzdirbegvjiipzkoefmrctagaveojnlqnyvsqewcqapuruxygxpzdtuaffjvamgzwawjcmmnxwaqexegkgrbigaxsobpzqnaxzpqouibnpdjgihvovxcoybsgwxfmzscztyzymhuynyhitosmkrwulmscjbewngpjetpglnylhnjqsuuztifbxnxtivgkctlxkipbxpoqayfmlhzmyiicwmjgkfsdkqmwtfzbcdtcpocdfwxlcdceebbwsseuwnygcsfqwodicrvvwyvgyavesaylfzvfbostyawdaqebnfrjmrmezlbrxbiefuhqkcluixhcslbiqcttnjmebxppzpvbquqqbcywaykoksmohjaiaaktroroykwmgnjwkvevccpzircgjnycryxmlkrhmwvuktdlvtfwrtzotndeunqycgkwlhqdmzltmedtssbhllvapyzmvyxhokqgegvceerjqunjzsiibvvxgglyrukoadropxhkovlprgevullbqdyjnxrzzhvsxcuqtkxzgmynlfbsqzpmkudgsykvfuvrrjkqjffwnbpwywgxwkfmvgtrsvkdtdejequfjfsagdjpaxnezkvpygjjazaokcytgkabkqnznzjdqwuaainppsmshmpuppxpdakaorlteeysuzypcelauhdmjnmwtofbcjuxbdmgwsrbpezcjikyhrimabdftlecjbbvqduglisprdzmkgkmspyzqzulcqkiefeqrsxhlhzieiuuhxengaceglovgqyobdxxzgfqxohimhkpupwarxtfqtfokajbnfutbujmwjagfhwpopwldzvuyhpdysdjuskbdgibziblozljjfkckkvapllnbxvngfmglbsbkapsmiivlbluwxhtainvxktcqtcmuwuqwnxcwwqgzulotiuigpiyhzczzhsmaqqsveubaappwlsfgisqdkoyhvfbaobsbztjscbwktppafwihbiipprvsmiztamqreikcirrpvwvxeulyhtssbqxpyhfbzaeufgykphzxsoizszfmnmgjrbztmlrxmxmotyjskqxlpevnsjurokoscogrqcwfxihahocpwjffwyohrvikywohrcmdiroatjubosrnovjrlcqqcbmcqifmagbkwzgfyhrymgrxdnhwqtqdescqqbzbqsshcppbrbmusdptvyonjdhhcptpoalgtxdhzzodobjhrreycjekzkcquommbtksueuvlvakrltlqmohzjqsmjbqfptuwutmdwginvwqizfyhxlxhqauttctsmpkrpdejohplpwdvwapuzahloohghpzbnmccxwngmbciykvfdyfqlmewkddkiqdhqsmqkgvkezhhfliuogzwlvqqqrmavxpnkykuijyuuvndronlthmbeaebywqauybfyffknrudrlplqaulcpoxfnstljgldpdvjhvfdlnsigrnqafzgozczlrqgiyymrqlqmwqxqweqatmpxguapzansancjrdzdmczqomhoaklsuosiztrgfzpyaczfllsckveubojueksgqodqxnxswvnyuwucufdcnicwfalbfcrezrsvhujwtcwozbqtnvjpwzvtykgkrjlzpukbruuxoijrysfgyhnsmprxlxmowddssltrdxkqgttambygrishoffuthboioncdwxqbgtmehdamvwqpurokgctfashocelquyoktpcwryujeddglpqnzorbgtfjiorubxoiksnlcmzduujosoqqoejkarueeojwuxjdawvxmssdpuwlmcpriejbmlyqbfstleykbszoiupagyrwkqcwmqmwrevaapjqbgywujcvxxohtzboqajwdqiyqynfpxqrxavxxyjenqasizbcgfburoxzrynmzxebbcqedtvwhgaunyudbjqmmuvlxrahhjkiycyjawfrskvpngoqpdwiiwfznbqyxukaxuocrfgplokzggpngwnzgxbhnkmaucpfqovwuaheiyyxmsvqlhxndurflybodfbcjxdmmzaeywaeiqskcdnrutzokjhqgzpqjlallywfdpahqlveyrjacgewavlvfhargdiaoslsvftzwqlhqpxssyoizklresoqxnturamrnoiuwsjjhthgkijbiskrbdhzczbdbvzbxcywbxeuqpqhupsiajiekiqzakuntqboxbleusdrhwmcrdqftoyserzsqwjzywxxhxatrobtzsgyuxfnminyxmjpfqufhdzvjnqjfjnotewofttbdwasvkqucuslcpnzugwgeipvqduldzgwgwphawslkmcojblmqplkirphmeayxxqlhycbadmiksgikhgqdoqxudeiojvhypoztzbffjjaiebskgvqujzeaubuhradkiegffimbfgagfuiipfjttroiansnprplcxsvdpnfgwvhvgshtohlmwfcxrowgxakuweqpklhhtmffdkfxbjpinjzpiiuswimpcrvednlldcqnmeylyqprbjkwdqjgbtfangjsttjsjkvxkgoyzwagkumuzsnqugzyqxujiwquvsyoovqsztkukoszrsitzstbxenedqziotyqbxhucpdlhruxmflqippcvdgznjdfxkyijzdzusqtbdsgkzfgzjnclfihfspiiysmojbnqcgulyjoqydntvudzhzhbgoqmznkkejrhulkvrzqxmvjquqxdzmtprhwzkjctvcccanrebzcuumlhzrhunssrtgctwqpmaioczeltaunaayhybcybjwkcyjyhjqwylsuglpggfxmizcbmpuvpxrvsvchuxyqpgoayyudirrjyznllwghdsecjchmriqubboptpincjxocgjpdycsfhabwptyejqcmvwlvhpklakuvznxitcnvqljeshjjvwdbhdhlaykkyrrruxtvjahsbacmclxsslchyurhnkytwhhygxqggtdobtwcxuievpyrtcohimwpnmyasobfrnqgpnbtrsztaiofxaadhkkbffsvxhyyzdmiioulkkxpusogirspqinskdzhejrxiqmtiuyvkwjkcgdokzkwaiufwfffqiuodcbzgfpbmgsovyeqolctwzjtzszbsyagzptpdbbukccmaytpvujxrmfdccwvsyunstpnkxbyrvxotuveweivgcgjcxpstjaikeobwsztajnhhwvtrrdwwmdzcpelrpzpvzbjgfimuztmrpmhecgvmmaasddrdtctnvpoovjvjgmgpeafzttssupzyztqajafrqdrptdqouauqswqrszjkphdxixjcxgprhoyzkxrdtnbvxccchgadylswhiqfjwfmsjhfmdcwdwwzczrdptcrozonuzfszizaefdvclwazcnkanejufkhanuxwdvfecmsixycpfibzolkprdlsjmrdibqtohoxkabpgiyfyuwggnsbdpfkqxdyuwitkbrwldryiekpsskxcaehwgdlfxysxvvshwopubmyvznfxwmmohhuraenhwnbonimfwntpodyrzwxgzioujlblpdzojjhjwjdnxcuxayoiryhjnbqryhpitbgwwisxzjfacwplwodvvgdkxftfpjeftbfmlkrsrjqsilpsxavttfdrcesesvirbdllznaxaovxjsnnazldzgrznmmjwrgfpfnfaqhoulpnlryqeimxbfwksxltrznrmrfsdtloraftybrrhshpouobqpwfnbiqxqnbmdqdmrwhzhtzdvjcvwqmztrjarydskzxokzpbjrpshbuffnehlovfgepfdggxwaqrpcxuhgscwfghkcmhbxrfjummsaugwmqawkkaivmtxwclvikopqylatsqkdyrsridwavnxyddfkhwwwrguobkxpxjwpghxcomdhdrftpzvnryylczyshjuuxdemixqovhilyguhbutikcjebtgexkpmjqfldzgxcsczplkszviixtxikuahweqgcsjqtedveexfakmijgicofkvgvkyxcmidrvfrlkqmhhlsmbxeyjtmrthoxspimyvnbucxgdnxwocsmbqlvilkqxgtmhchbxsppsqksaubcvjgdnppvymqfkuddzpzdtxounkirlrvaqckymrsluiphanjkxlzoknvoislrkfupauqzjjikkkylkjhzehyirtyyjltxlixflkuechuxaryjfpfdvdlrobzqnnzurmesthbwtzzhyluaiehdxmzlpxbvfnnetbgijwlttcfxquhznsqwghbfrqyfdvkmyxlokjqlflbytjzlgdpctlzjrixbrdytuzveloyhbnzndkibatzppjzblazihoyhhfnicdqgguvfrwibzotwrckphcsifqvtwrfyjinmjcaaqxbmlasjhhstbkbjyisqqdotsvoieqofmwqfmiqozujkkqlisdhbzauamshbodejuabobmkqsyfbtlaisgwyglakqhsumddpqmbrqtravwxycjyl"


class Solution(object):
    def validPalindrome(self, s):
        i = 0
        j = len(s) - 1
        count = 0
        while i < j:
            if s[i] != s[j]:
                if count == 1:
                    count += 1
                    break
                else:
                    i += 1
                    count = 1
                    continue
            i += 1
            j -= 1
        if count <= 1:
            return True
        i = 0
        j = len(s) - 1
        count = 0
        while i < j:
            if s[i] != s[j]:
                if count == 1:
                    return False
                else:
                    j -= 1
                    count = 1
                    continue
            i += 1
            j -= 1
        if count <= 1:
            return True
        return False


import unittest


class Tests(unittest.TestCase):
    def setUp(self):
        self.s = Solution()

    def test_01(self):
        self.assertEqual(self.s.validPalindrome(""), True)

    def test_02(self):
        self.assertEqual(self.s.validPalindrome("ab"), True)

    def test_03(self):
        self.assertEqual(self.s.validPalindrome("aa"), True)

    def test_04(self):
        self.assertEqual(self.s.validPalindrome("aab"), True)

    def test_05(self):
        self.assertEqual(self.s.validPalindrome("abca"), True)

    def test_06(self):
        self.assertEqual(self.s.validPalindrome("abcalsnvdingdfhsgdsighsg"), False)

    def test_07(self):
        self.assertEqual(self.s.validPalindrome(long_text), False)


unittest.main()
